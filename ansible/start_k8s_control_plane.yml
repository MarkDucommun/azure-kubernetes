- name: Start Single-Node Kubernetes Cluster
  hosts: all
  become: true
  tasks:
    - name: Create Azure CCM Cloud Config Secret
      become: true
      template:
        src: templates/azure-cloud-config-secret.j2
        dest: /etc/kubernetes/azure-cloud-config-secret.json

    - name: Create Kubernetes Api Server Cluster Configuration
      become: true
      template:
        src: templates/kubeadm-config.j2
        dest: /etc/kubernetes/kubeadm-config.yaml

    - name: Disable swap
      shell: |
        if swapon --show | grep -q swap; then
          swapoff -a
        fi
      changed_when: false

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: true
        state: started
      become: true

    - name: Ensure overlay module is loaded
      command: modprobe overlay
      become: true

    - name: Ensure br_netfilter module is loaded
      command: modprobe br_netfilter
      become: true

    - name: Set sysctl parameters for Kubernetes networking
      sysctl:
        name: "{{ item }}"
        value: 1
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-iptables
#        - net.ipv6.conf.all.disable_ipv6
#        - net.ipv6.conf.default.disable_ipv6
        - net.ipv4.ip_forward
      become: true

    - name: Check if Kubernetes cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_status

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=192.168.0.0/16  #--config /tmp/kube/kubeadm-config.yaml
      when: kubeadm_status.stat.exists == false
      become: true

    - name: Copy /etc/kubernetes/admin.conf to $HOME/.kube/config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes
      become: yes

    - name: Check if Azure Secret exists
      shell: kubectl get secret azure-config-secret -n kube-system | grep -q azure-config-secret
      register: kube_azure_secret_check
      become: true
      become_user: "{{ ansible_user }}"
      failed_when: kube_azure_secret_check.rc not in [0, 1]

    - name: Apply Azure Secret
      command: kubectl create secret generic azure-config-secret --from-file=/etc/kubernetes/azure-cloud-config-secret.json -n kube-system
      become: true
      become_user: "{{ ansible_user }}"
      when: kube_azure_secret_check.rc == 1

    - name: Check if Calico is already deployed
      command: kubectl get pods -n calico-system
      register: calico_check
      changed_when: false
      failed_when: false
      become_user: "{{ ansible_user }}"

    - name: Install Calico for Pod Networking if not already present
#      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      shell: |
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/tigera-operator.yaml
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/custom-resources.yaml

      when: "'calico' not in calico_check.stdout"
      become: true
      become_user: "{{ ansible_user }}"

    - name: Check if control-plane taint is present
      shell: |
        kubectl get nodes -o jsonpath='{.items[0].spec.taints}' | grep -q "node-role.kubernetes.io/control-plane"
      register: taint_check
      become_user: "{{ ansible_user }}"
      changed_when: false
      failed_when: taint_check.rc not in [0, 1]

    - name: Remove control-plane taint to allow workloads
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      when: taint_check.rc == 0
      become_user: "{{ ansible_user }}"

    - name: Check if ArgoCD namespace exists
      command: kubectl get namespace
      register: argocd_namespace_check
      become: true
      become_user: "{{ ansible_user }}"

    - name: Create ArgoCD namespace
      command: kubectl create namespace argocd
      become: true
      become_user: "{{ ansible_user }}"
      when: "'argocd' not in argocd_namespace_check.stdout"

    - name: Check if ArgoCD is already deployed
      command: kubectl get pods -n argocd
      register: argocd_check
      changed_when: false
      failed_when: false
      become_user: "{{ ansible_user }}"

    - name: Install ArgoCD if not already present
      command: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      when: "'argocd' not in argocd_check.stdout"
      become: true
      become_user: "{{ ansible_user }}"

    - name: Apply ArgoCD Application manifest
      command: kubectl apply -n argocd -f /etc/kubernetes/addons/argo/manifest.yml
      become: true
      become_user: "{{ ansible_user }}"
